/**
 * 分路段限速图层
 * Created by liulin on 2018/3/16.
 */


ES.MapView.SpeedLimitLayer = ES.MapView.LineLayer.extend({


    //执行画点，画线操作
    oOption: {
        onEventDrawLayers: 'MapView:SpeedLimit.show',

        onEventClearLayers: 'MapView:SpeedLimit.hide',
        onEventRemoveLayers: 'MapView:SpeedLimit.RemoveLayers',

        oStyleConfig: {

            stroke: true,
            color: 'green',
            dashArray: null,
            lineCap: null,
            lineJoin: null,
            weight: 3,
            opacity: 1,
            fill: false,
            fillColor: null,
            fillOpacity: 0.2,
            clickable: false,
            smoothFactor: 1.0,
            noClip: false

        },

        oStyleSmallConfig: {

            stroke: true,
            color: 'green',
            dashArray: null,
            lineCap: null,
            lineJoin: null,
            weight: 2,
            opacity: 1,
            fill: false,
            fillColor: null,
            fillOpacity: 0.2,
            clickable: false,
            smoothFactor: 1.0,
            noClip: false

        },

        cHtml: '<div class="{cCls}"><div class="{cBCls}"></div><div class="{cTCls}">{Name}</div></div>'
    },


    _getLineColor: function (oData, cTarget) {

        return {color: 'red'};
    },


    initialize: function (oParent, oOption) {
        L.MapLib.MapMaster.MapOpr.prototype.initialize.call(this, oParent, {});
        ES.setOptions(this, oOption);
        // 执行自己的方法
        this._initGroup();
        this._loadOn();
    },

    // 初始化Group
    _initGroup: function () {

        this._oPolylineGroup = L.featureGroup();

        this._oMap.addLayer(this._oPolylineGroup);

    },

    //初始化时加载数据
    _loadOn: function () {

        // 画所有的工地数据
        this._oParent.on(this.oOption.onEventDrawLayers, this.drawLayers, this);
        this._oParent.on(this.oOption.onEventClearLayers, this.clearLayer, this);
        this._oParent.on(this.oOption.onEventRemoveLayers, this.removeLayers, this);

        this._oMap.on('moveend', function () {

            if (!this._oPolylineGroup) return;
            this._oPolylineGroup.eachLayer(function (oLayer) {
                if (oLayer.cType == 'AssessLayer') {

                    if (this._oMap.getZoom() <= 8) {

                        oLayer.setStyle({weight: 2});
                    }
                    else {
                        oLayer.setStyle({weight: this.oOption.oStyleConfig.weight});
                    }
                }
            }, this);

        }, this);
    },

    removeLayers: function (oData) {
        var aoData = oData.aoData;
        for (var i = 0; i < aoData.length; i++) {
            var oLayer = this.findLayer(this._oPolylineGroup, aoData[i].data.id);
            if (!oLayer) continue;
            if (oLayer.oMarker) {
                this._oPolylineGroup.removeLayer(oLayer.oMarker);
            }
            this._oPolylineGroup.removeLayer(oLayer);
        };
    },
    clearLayer: function () {
        this._oPolylineGroup.clearLayers();
    },

    // 画所有工地，数据保护所有工地,存在相同的工地和消纳点就不用画
    drawLayers: function (oData) {

        if (!oData || !oData.aoData) {
            return;
        }

        var aoLatLnt = [];
        for (var i = 0; i < oData.aoData.length; i++) {
            var oLayer = this.findLayer(this._oPolylineGroup, oData.aoData[i].id);
            if (oLayer) {
                continue;
            }
            this.drawLayer(oData.aoData[i], oData.cTarget);
        }

        this._oMap.fitBounds(this._oPolylineGroup.getBounds());


    },

    drawLayer: function (oData, cTarget) {
        if (!oData) {
            return;
        }

        // 编辑邮路,画围栏时要表明自己的名称
        var oVehLine = this.createLayer(oData, cTarget);
        if (!oVehLine) {
            return;
        }
        oVehLine.cId = oData.data.id;

        var cHtml = ES.Util.template(this.cHtml, oData.data);
        if(oData.data.speed){

             cHtml = ES.Util.template(this.cSpeedHtml, oData.data);
        }

        var oIcon = this._getIcon(cHtml);

        var oMarker = L.marker(oVehLine.getCenter(), { icon: oIcon });

        oMarker.addTo(this._oPolylineGroup);
        oVehLine.oMarker = oMarker;
    },

    _getIcon: function (cHtml) {

        var oIcon = L.divIcon({
            iconSize: [20, 20], iconAnchor: [0, 0],
            popupAnchor: [-1, -20],
            className: "",
            html: cHtml,
        });
        return oIcon;
    },

    initEventForMarker: function (oMarker) {
        var self = this;
        if (!oMarker) {
            return;
        }

        oMarker.on('click', function () {

            ES.Util.reqData({
                    url: '/AssessSegment/GetMapPopup',
                    data: {Mseg: this.SegmentCode},
                    dataType: 'html',
                },
                function (oData) {
                    this.bindPopup(oData.rtnData, {maxWidth: 400});
                    this.openPopup();
                },
                this);

        }, oMarker);

    },


    // 设置图层设置
    createLayer: function (oData, cTarget) {
        var oVehLine = null;
        if (!oData || !oData.data || !oData.data.MapY) {
            return oVehLine;
        }

        var aoLatLng = [];
        var lats = oData.data.MapY.split(",");
        var lngs = oData.data.MapX.split(",");
        for (var j = 0; j < lats.length; j++) {
            aoLatLng.push({lat: lats[j], lng: lngs[j]});
        }

        ES.extend(this.oOption.oStyleConfig, this._getLineColor(oData, cTarget));

        oVehLine = L.polyline(aoLatLng, this.oOption.oStyleConfig).addTo(this._oPolylineGroup);
        //oVehLine.cType = 'AssessLayer';
        //this.initEventForMarker(oVehLine);

        //oVehLine.setText(oData.MaintainName + ':' + oData.name + '        ', {
        //    repeat: true,
        //    offset: 20,
        //    attributes: {'font-size': '16', fill: 'red'}
        //});
        return oVehLine;
    },

});

ES.MapView.SpeedLimitLayer.include({
    cSpeedHtml:
    '<div class="ex-monitor-mapicon-site alert">' +
    '           <div class="pin-tip" style="display: block;">' +
    '               <div class="areaCount-number">{Name}</div>' +
    '           </div>' +
    '           <div class="speedlimit-body">{speed}</div>' +
    '       </div>',
    cHtml:
    '<div class="ex-monitor-mapicon-site alert">' +
    '           <div class="pin-tip" style="display: block;">' +
    '               <div class="areaCount-number">{Name}</div>' +
    '           </div>' +
    '       </div>'
});